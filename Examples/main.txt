/* ARM/ARM64 TESTS:

#include <iostream>
#include <vector>
#include <array>
#include <chrono>

extern "C" {
    void gills_inv_matrix2x2(double* num1, double* num2, double* num3, double* num4, double* out_matrix);
    void gills_matrix2x2(double matrixA[2][2], double matrixB[2][2], double matrixC[2][2]);
    void gills_matrix2x1(double matrixA[2], double matrixB[2], double matrixC[1]);
    //void gills_hadamard2x1(double target_matrix2x1[2], double output[2]);
    void pauli_X(double A[2], double B[2]);
    void pauli_Z(double A[2], double B[2]);
    void identity_matrix2x2(double matrixA[2][2], double matrixB[2][2]);
}

int main() {
    std::array<double, 2> A = {1.0, 0.0};
    std::array<double, 2> B = {0.0, 1.0};
    std::array<double, 1> C = {0.0};
    std::array<double, 2> Cx2x1 = {0.0, 0.0};
    double matrixA[2][2] = {{8.0, 5.0}, {2.0, 3.0}};
    double matrixB[2][2] = {{19.0, 1.0}, {0.1, 4.0}};
    double matrixC[2][2] = {{0.0, 0.0}, {0.0, 0.0}};
    double num1 = 1.0;
    double num2 = 2.0;
    double num3 = 3.0;
    double num4 = 4.0;
    double out_matrix[4] = {0.0, 0.0, 0.0, 0.0};

    std::cout << "Inverse of a 2x2 matrix:" << std::endl;
    auto start_asm1 = std::chrono::high_resolution_clock::now();
    gills_inv_matrix2x2(&num1, &num2, &num3, &num4, out_matrix);
    auto end_asm1 = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double, std::micro> duration_asm1 = end_asm1 - start_asm1;

    std::cout << "Assembly Duration: " << duration_asm1.count() << " microseconds\n";

    std::cout << "Inverted matrix:" << std::endl;
    std::cout << out_matrix[0] << " " << out_matrix[1] << std::endl;
    std::cout << out_matrix[2] << " " << out_matrix[3] << "\n\n";

    std::cout << "Mul two 2x2 matrix's:" << std::endl;
    auto start_asm2 = std::chrono::high_resolution_clock::now();
    gills_matrix2x2(matrixA, matrixB, matrixC);
    auto end_asm2 = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double, std::micro> duration_asm2 = end_asm2 - start_asm2;
    std::cout << "Assembly Duration: " << duration_asm2.count() << " microseconds\n";

    std::cout << "Resultant Matrix:" << std::endl;
    std::cout << matrixC[0][0] << " " << matrixC[0][1] << std::endl;
    std::cout << matrixC[1][0] << " " << matrixC[1][1] << "\n\n";

    std::cout << "MUL two 2x1 Matrix:" << std::endl;
    auto start_asm3 = std::chrono::high_resolution_clock::now();
    gills_matrix2x1(A.data(), B.data(), C.data());
    auto end_asm3 = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double, std::micro> duration_asm3 = end_asm3 - start_asm3;
    std::cout << "Assembly Duration: " << duration_asm3.count() << " microseconds\n";
    std::cout << "Resultant:" << std::endl;
    std::cout << "[" << C[0] << "]" << "\n\n";

    std::cout << "Pauli_X Gate:" << std::endl;
    auto start_asm4 = std::chrono::high_resolution_clock::now();
    pauli_X(A.data(), C.data());
    auto end_asm4 = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double, std::micro> duration_asm4 = end_asm4 - start_asm4;
    std::cout << "Assembly Duration: " << duration_asm4.count() << " microseconds\n";
    std::cout << "Resultant Vector:" << std::endl;
    std::cout << "[" << C[0] << "]" << "\n" << "[" << C[1] << "]" << "\n\n";

    std::cout << "Pauli_Z Gate:" << std::endl;
    auto start_asm5 = std::chrono::high_resolution_clock::now();
    pauli_Z(A.data(), C.data());
    auto end_asm5 = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double, std::micro> duration_asm5 = end_asm5 - start_asm5;
    std::cout << "Assembly Duration: " << duration_asm5.count() << " microseconds\n";
    std::cout << "Resultant Vector:" << std::endl;
    std::cout << "[" << C[0] << "]" << "\n" << "[" << C[1] << "]" << "\n\n";

    std::cout << "Identity Gate:" << std::endl;
    auto start_asm6 = std::chrono::high_resolution_clock::now();
    identity_matrix2x2(matrixA, matrixB);
    auto end_asm6 = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double, std::micro> duration_asm6 = end_asm6 - start_asm6;
    std::cout << "Assembly Duration: " << duration_asm6.count() << " microseconds\n";
    std::cout << "Resultant Matrix:" << std::endl;
    std::cout << matrixB[0][0] << " " << matrixB[0][1] << std::endl;
    std::cout << matrixB[1][0] << " " << matrixB[1][1] << "\n\n";
    return 0;
} */




/* INTEL x86-64 TESTS:



#include <iostream>
#include <vector>
#include <chrono>

extern "C" {
    void matrix2x2(int64_t* A, int64_t* B, int64_t* C);
}

void matrix2x2_cpp(const std::vector<int64_t>& A, const std::vector<int64_t>& B, std::vector<int64_t>& C) {
    C[0] = A[0] * B[0] + A[1] * B[2];
    C[1] = A[0] * B[1] + A[1] * B[3];
    C[2] = A[2] * B[0] + A[3] * B[2];
    C[3] = A[2] * B[1] + A[3] * B[3];
}

int main() {
    std::vector<int64_t> A = {1, 2, 3, 4};
    std::vector<int64_t> B = {5, 6, 7, 8};
    std::vector<int64_t> C_cpp(4, 0);
    std::vector<int64_t> C_asm(4, 0);

    // Measure time for C++ implementation
    auto start_cpp = std::chrono::high_resolution_clock::now();
    matrix2x2_cpp(A, B, C_cpp);
    auto end_cpp = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double, std::micro> duration_cpp = end_cpp - start_cpp;

    // Measure time for assembly implementation
    auto start_asm = std::chrono::high_resolution_clock::now();
    matrix2x2(A.data(), B.data(), C_asm.data());
    auto end_asm = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double, std::micro> duration_asm = end_asm - start_asm;

    // Print results
    std::cout << "C++ Result: ";
    for (const auto& val : C_cpp) std::cout << val << " ";
    std::cout << "\n";

    std::cout << "Assembly Result: ";
    for (const auto& val : C_asm) std::cout << val << " ";
    std::cout << "\n";

    std::cout << "C++ Duration: " << duration_cpp.count() << " microseconds\n";
    std::cout << "Assembly Duration: " << duration_asm.count() << " microseconds\n";

    return 0;
}
*/

//C file
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <time.h>
#include <complex.h>

typedef struct {
    double x;
    double y;
} ds_Complex;

typedef struct {
    double x;
    char i;
} imaginary;

// Function prototypes for assembly functions
extern double esigx01(double c, double s, double z1, double z2);
extern double esigx00(double c, double s, double z1, double z2);
extern double esigx10(double c, double s, double z1, double z2);
extern double H(double *qubit1);
extern void pauli_y_gate(double *state);
extern char* phase_gate(void);
extern double convert_imaginary(imaginary* num);
extern double CNOT(double *qubit1, double *qubit2);
extern double CCNOT(double *qubit1, double *qubit2, double *qubit3);
extern double CZ(double *qubit1, double *qubit2);

void c_ds_esigx(ds_Complex *zPtr1, ds_Complex *zPtr2, double theta) {
    double c = cos(theta / 2);
    double s = sin(theta / 2);
    ds_Complex z1 = *zPtr1;
    ds_Complex z2 = *zPtr2;

    zPtr1->x = c * z1.x - s * z2.y;
    zPtr1->y = c * z1.y + s * z2.x;
    zPtr2->x = -s * z1.y + c * z2.x;
    zPtr2->y = s * z1.x + c * z2.y;
}

void asm_ds_esigx(ds_Complex *zPtr1, ds_Complex *zPtr2, double theta) {
    double c = cos(theta / 2);
    double s = sin(theta / 2);
    ds_Complex z1 = *zPtr1;
    ds_Complex z2 = *zPtr2;

    zPtr1->x = esigx01(c, s, z1.x, z2.y);
    zPtr1->y = esigx00(c, s, z1.y, z2.x);
    zPtr2->x = esigx10(-s, c, z1.y, z2.x);
    zPtr2->y = esigx00(s, c, z1.x, z2.y);
}

void c_H(double *qubit) {
    double temp0 = qubit[0];
    double temp1 = qubit[1];
    qubit[0] = (temp0 + temp1) / sqrt(2.0);
    qubit[1] = (temp0 - temp1) / sqrt(2.0);
}

void c_CNOT(double *qubit1, double *qubit2) {
    if (qubit1[0] == 0.0 && qubit1[1] == 1.0) {
        double temp = qubit2[0];
        qubit2[0] = qubit2[1];
        qubit2[1] = temp;
    }
}

void c_CCNOT(double *qubit1, double *qubit2, double *qubit3) {
    if (qubit1[0] == 0.0 && qubit1[1] == 1.0 && qubit2[0] == 0.0 && qubit2[1] == 1.0) {
        double temp = qubit3[0];
        qubit3[0] = qubit3[1];
        qubit3[1] = temp;
    }
}

void c_CZ(double *qubit1, double *qubit2) {
    if (qubit1[0] == 0.0 && qubit1[1] == 1.0) {
        qubit2[1] = -qubit2[1];
    }
}

int main() {
    double matrixC[2][2] = {{0.0, 0.0}, {0.0, 0.0}};
    double matrixA[2][2] = {{8.0, 5.0}, {2.0, 3.0}};
    double qubit[2] = {0.0, 1.0};
    double quantum_state[4] = {1.0, 0.0, 0.0, 0.0};
    ds_Complex z1_asm = {1.0, 2.0};
    ds_Complex z2_asm = {3.0, 4.0};
    ds_Complex z1_c = {1.0, 2.0};
    ds_Complex z2_c = {3.0, 4.0};

    double theta = M_PI / 4;

    // Measure execution time of the C ds_esigx function
    clock_t startC = clock();
    c_ds_esigx(&z1_c, &z2_c, theta);
    clock_t endC = clock();
    double cpu_time_usedC = ((double) (endC - startC)) / CLOCKS_PER_SEC;

    // Measure execution time of the assembly ds_esigx function
    clock_t startASM = clock();
    asm_ds_esigx(&z1_asm, &z2_asm, theta);
    clock_t endASM = clock();
    double cpu_time_usedASM = ((double) (endASM - startASM)) / CLOCKS_PER_SEC;

    // Print results for the assembly function
    printf("Assembly ds_esigx:\n");
    printf("Time taken: %f seconds\n", cpu_time_usedASM);
    printf("z1: (%f, %f)\n", z1_asm.x, z1_asm.y);
    printf("z2: (%f, %f)\n\n", z2_asm.x, z2_asm.y);

    // Print results for the C function
    printf("C ds_esigx:\n");
    printf("Time taken: %f seconds\n", cpu_time_usedC);
    printf("z1: (%f, %f)\n", z1_c.x, z1_c.y);
    printf("z2: (%f, %f)\n\n", z2_c.x, z2_c.y);

    // Initialize qubit for Hadamard operation
    qubit[0] = 0.0;
    qubit[1] = 1.0;

    // Measure execution time of the C Hadamard function
    clock_t startC_H = clock();
    c_H(qubit);
    clock_t endC_H = clock();
    double cpu_time_usedC_H = ((double)(endC_H - startC_H)) / CLOCKS_PER_SEC;

    qubit[0] = 0.0;
    qubit[1] = 1.0;
    // Measure execution time of the assembly Hadamard function
    clock_t startASM_H = clock();
    H(qubit);
    clock_t endASM_H = clock();
    double cpu_time_usedASM_H = ((double) (endASM_H - startASM_H)) / CLOCKS_PER_SEC;

    // Print Hadamard results
    printf("Hadamard of Qubit\n");
    printf("Time taken: %f seconds (C)\n", cpu_time_usedC_H);
    printf("Time taken: %f seconds (Assembly)\n", cpu_time_usedASM_H);
    printf("%f, %f \n\n", qubit[0], qubit[1]);

    // Pauli-Y operation
    printf("Pauli-Y\n");
    printf("Original State:\n");
    printf("α = %f + %fi\n", quantum_state[0], quantum_state[1]);
    printf("β = %f + %fi\n", quantum_state[2], quantum_state[3]);

    pauli_y_gate(quantum_state);

    printf("Transformed State (After Pauli-Y Gate):\n");
    printf("Qubit = %f, %fi\n\n", quantum_state[0], quantum_state[1]);

    // Convert imaginary number to real
    imaginary num = {2.0, 'i'};
    double res = convert_imaginary(&num);
    printf("Imaginary to Real: %f\n\n", res);

    // CNOT Gate
    printf("CNOT Gate: \n");
    double qubit01[2] = {0.0, 1.0};
    double qubit02[2] = {0.0, 1.0};
    double qubit03[2] = {1.0, 0.0};

    c_CNOT(qubit01, qubit02);
    printf("Result: %f, %f \n\n", qubit02[0], qubit02[1]);

    // Measure execution time of the C CNOT function
    qubit02[0] = 0.0; // Reset
    qubit02[1] = 1.0;
    clock_t startC_CNOT = clock();
    c_CNOT(qubit01, qubit02);
    clock_t endC_CNOT = clock();
    double cpu_time_usedC_CNOT = ((double)(endC_CNOT - startC_CNOT)) / CLOCKS_PER_SEC;
    printf("CNOT Time taken: %f seconds (C)\n\n", cpu_time_usedC_CNOT);

    // Measure execution time of the assembly CNOT function
    qubit02[0] = 0.0; // Reset
    qubit02[1] = 1.0;
    clock_t startASM_CNOT = clock();
    CNOT(qubit01, qubit02);
    clock_t endASM_CNOT = clock();
    double cpu_time_usedASM_CNOT = ((double)(endASM_CNOT - startASM_CNOT)) / CLOCKS_PER_SEC;
    printf("CNOT Time taken: %f seconds (Assembly)\n\n", cpu_time_usedASM_CNOT);

    // CCNOT Gate
    printf("CCNOT Gate: \n");
    double qubit04[2] = {0.0, 1.0};
    double qubit05[2] = {0.0, 1.0};
    double qubit06[2] = {1.0, 0.0};

    c_CCNOT(qubit04, qubit05, qubit06);
    printf("Result: %f, %f \n\n", qubit06[0], qubit06[1]);

    // Measure execution time of the C CCNOT function
    qubit06[0] = 1.0; // Reset
    qubit06[1] = 0.0;
    clock_t startC_CCNOT = clock();
    c_CCNOT(qubit04, qubit05, qubit06);
    clock_t endC_CCNOT = clock();
    double cpu_time_usedC_CCNOT = ((double)(endC_CCNOT - startC_CCNOT)) / CLOCKS_PER_SEC;
    printf("CCNOT Time taken: %f seconds (C)\n\n", cpu_time_usedC_CCNOT);

    // Measure execution time of the assembly CCNOT function
    qubit06[0] = 1.0; // Reset
    qubit06[1] = 0.0;
    clock_t startASM_CCNOT = clock();
    CCNOT(qubit04, qubit05, qubit06);
    clock_t endASM_CCNOT = clock();
    double cpu_time_usedASM_CCNOT = ((double)(endASM_CCNOT - startASM_CCNOT)) / CLOCKS_PER_SEC;
    printf("CCNOT Time taken: %f seconds (Assembly)\n\n", cpu_time_usedASM_CCNOT);

    // CZ Gate
    printf("CZ Gate: \n");
    double qubit07[2] = {0.0, 1.0};
    double qubit08[2] = {0.0, 1.0};

    c_CZ(qubit07, qubit08);
    printf("Result: %f, %f \n\n", qubit08[0], qubit08[1]);

    // Measure execution time of the C CZ function
    qubit08[0] = 0.0; // Reset
    qubit08[1] = 1.0;
    clock_t startC_CZ = clock();
    c_CZ(qubit07, qubit08);
    clock_t endC_CZ = clock();
    double cpu_time_usedC_CZ = ((double)(endC_CZ - startC_CZ)) / CLOCKS_PER_SEC;
    printf("CZ Time taken: %f seconds (C)\n\n", cpu_time_usedC_CZ);

    // Measure execution time of the assembly CZ function
    qubit08[0] = 0.0; // Reset
    qubit08[1] = 1.0;
    clock_t startASM_CZ = clock();
    CZ(qubit07, qubit08);
    clock_t endASM_CZ = clock();
    double cpu_time_usedASM_CZ = ((double)(endASM_CZ - startASM_CZ)) / CLOCKS_PER_SEC;
    printf("CZ Time taken: %f seconds (Assembly)\n\n", cpu_time_usedASM_CZ);

    return 0;
}
